name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy

env:
  AWS_REGION: eu-west-3
  TF_VERSION: 1.6.0

jobs:
  deploy:
    name: Deploy Infrastructure and Application
    runs-on: ubuntu-22.04
    if: github.event.inputs.action != 'destroy'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Extract commit short SHA
        id: sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var="docker_image_tag=${{ steps.sha.outputs.SHORT_SHA }}" \
            -out=tfplan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

      - name: Get deployment outputs
        working-directory: ./terraform
        id: outputs
        run: |
          echo "instance_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT
          echo "thread_url=$(terraform output -raw thread_url)" >> $GITHUB_OUTPUT
          echo "sender_url=$(terraform output -raw sender_url)" >> $GITHUB_OUTPUT
          echo "api_url=$(terraform output -raw api_url)" >> $GITHUB_OUTPUT

      - name: Wait for services to be ready
        run: |
          echo "Waiting for services to start..."
          sleep 120
          
          # Health check with retries
          for i in {1..10}; do
            if curl -f "${{ steps.outputs.outputs.thread_url }}" && \
               curl -f "${{ steps.outputs.outputs.sender_url }}" && \
               curl -f "${{ steps.outputs.outputs.api_url }}"; then
              echo "All services are healthy!"
              break
            fi
            echo "Attempt $i failed, retrying in 30 seconds..."
            sleep 30
          done

      - name: Deployment Summary
        run: |
          echo "## 🚀 Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Service URLs:" >> $GITHUB_STEP_SUMMARY
          echo "- **Thread (Main App)**: ${{ steps.outputs.outputs.thread_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Sender (Post Messages)**: ${{ steps.outputs.outputs.sender_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **API (Backend)**: ${{ steps.outputs.outputs.api_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Instance Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Public IP**: ${{ steps.outputs.outputs.instance_ip }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Instance Type**: t3.nano" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag**: ${{ steps.sha.outputs.SHORT_SHA }}" >> $GITHUB_STEP_SUMMARY

  destroy:
    name: Destroy Infrastructure
    runs-on: ubuntu-22.04
    if: github.event.inputs.action == 'destroy'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Destroy
        working-directory: ./terraform
        run: terraform destroy -auto-approve

      - name: Destruction Summary
        run: |
          echo "## 🗑️ Infrastructure Destroyed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All AWS resources have been successfully destroyed." >> $GITHUB_STEP_SUMMARY
