name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

# Permissions globales pour le workflow
permissions:
  contents: read
  packages: write
  id-token: write

# Variables d'environnement globales pour le registre Docker
env:
  REGISTRY: ghcr.io
  REPOSITORY: ${{ github.repository }}

jobs:
  validate:
    name: Lint and Format
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Lint
        run: pnpm lint
        
      - name: Format check
        run: pnpm format:check || true # Continue mÃªme si la vÃ©rification Ã©choue

  test:
    name: Run Tests
    needs: validate
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install
        
      - name: Run tests
        run: pnpm test

  build-and-push-images:
    name: Build and Push Docker Images
    needs: test
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write  # Essentiel pour publier des packages
    strategy:
      matrix:
        service: [api, thread, sender]
        include:
          - service: api
            context: ./apps/api
          - service: thread
            context: ./apps/thread
          - service: sender
            context: ./apps/sender

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Conversion du nom du repo en minuscules (requis par ghcr.io)
      - name: Convert repository name to lowercase
        id: repo_name
        run: echo "REPO_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      # Extraction du hash court du commit pour les tags d'image
      - name: Extract commit short SHA
        id: sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # Authentification au GitHub Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Configuration de Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Construction et publication de l'image Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          push: true
          provenance: false
          tags: |
            ${{ env.REGISTRY }}/${{ steps.repo_name.outputs.REPO_NAME }}/${{ matrix.service }}:latest
            ${{ env.REGISTRY }}/${{ steps.repo_name.outputs.REPO_NAME }}/${{ matrix.service }}:${{ steps.sha.outputs.SHORT_SHA }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to AWS
    needs: build-and-push-images
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      - name: Extract commit short SHA
        id: sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var="docker_image_tag=${{ steps.sha.outputs.SHORT_SHA }}" \
            -out=tfplan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

      - name: Get deployment outputs
        working-directory: ./terraform
        id: outputs
        run: |
          echo "thread_url=$(terraform output -raw thread_url)" >> $GITHUB_OUTPUT
          echo "sender_url=$(terraform output -raw sender_url)" >> $GITHUB_OUTPUT
          echo "api_url=$(terraform output -raw api_url)" >> $GITHUB_OUTPUT

      - name: Deployment Summary
        run: |
          echo "## ðŸš€ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "- **Thread**: ${{ steps.outputs.outputs.thread_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Sender**: ${{ steps.outputs.outputs.sender_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **API**: ${{ steps.outputs.outputs.api_url }}" >> $GITHUB_STEP_SUMMARY
